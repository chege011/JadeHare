find_program(git_executable NAMES git git.exx git.cmd)
if (NOT git_executable)
  message(FATAL_ERROR "Failed to find git.")
endif ()

function(UpdateExternalLib name url rev)
  set(need_checkout FALSE)
  set(external_folder "${CMAKE_CURRENT_SOURCE_DIR}")
  set(external_lib_folder "${external_folder}/${name}")
  if (EXISTS ${external_lib_folder})
    message(STATUS "Updating ${name} to revision ${rev}...")
    execute_process(COMMAND "${git_executable}" "fetch" "origin" WORKING_DIRECTORY "${external_lib_folder}")
    execute_process(COMMAND "${git_executable}" "rev-parse" "HEAD" WORKING_DIRECTORY "${external_lib_folder}" OUTPUT_VARIABLE head_rev)
    string(STRIP ${head_rev} head_rev)
    if (${head_rev} STREQUAL ${rev})
      set(need_checkout FALSE)
    else ()
      set(need_checkout TRUE)
    endif ()
  else ()
    message(STATUS "Cloning ${name} revision...")
    execute_process(COMMAND "${git_executable}" "clone" ${url} "-n" WORKING_DIRECTORY "${external_folder}")
    set(need_checkout TRUE)
  endif ()
  if (need_checkout)
    message(STATUS "Checking out to revision ${rev}...")
    execute_process(COMMAND "${git_executable}" "checkout" "-q" ${rev} WORKING_DIRECTORY "${external_lib_folder}")
  endif ()
endfunction()

function(ApplyPatch name patch)
  set(external_folder "${CMAKE_CURRENT_SOURCE_DIR}")
  set(external_lib_folder "${external_folder}/${name}")

  execute_process(COMMAND "${git_executable}" "apply" "--check" "--ignore-space-change" "${patch}" WORKING_DIRECTORY ${external_lib_folder} RESULT_VARIABLE checkout_err)
  if (NOT checkout_err)
    message(STATUS "Applying ${patch}...")
    execute_process(COMMAND "${git_executable}" "am" "--ignore-space-change" "${patch}" WORKING_DIRECTORY ${external_lib_folder})
  endif ()
endfunction()

set(EXTERNAL_LIBRARY_PATH
  ${CMAKE_CURRENT_SOURCE_DIR}
  )

function(UpdateExternalLibTag name url tag)
  set(need_checkout FALSE)
  set(external_folder "${CMAKE_CURRENT_SOURCE_DIR}")
  set(external_lib_folder "${external_folder}/${name}")
  if (EXISTS ${external_lib_folder})
    message(STATUS "Updating ${name} to tag ${tag}...")
    execute_process(COMMAND "${git_executable}" "fetch" WORKING_DIRECTORY "${external_lib_folder}")
    execute_process(COMMAND "${git_executable}" "describe" "--tags" WORKING_DIRECTORY "${external_lib_folder}" OUTPUT_VARIABLE head_tag)
    string(STRIP ${head_tag} head_tag)
    if (${head_tag} STREQUAL ${tag})
      set(need_checkout FALSE)
    else ()
      set(need_checkout TRUE)
    endif ()
  else ()
    message(STATUS "Cloning ${name} revision...")
    execute_process(COMMAND "${git_executable}" "clone" ${url} "-n" WORKING_DIRECTORY "${external_folder}")
    set(need_checkout TRUE)
  endif ()
  if (need_checkout)
    message(STATUS "Checking out to tag ${tag}...")
    execute_process(COMMAND "${git_executable}" "checkout" "-q" ${tag} WORKING_DIRECTORY "${external_lib_folder}")
  endif ()
endfunction()

include(cxxopts.cmake)
include(glm.cmake)
include(entt.cmake)
include(imgui.cmake)
include(sdl.cmake)
include(spdlog.cmake)
#include(usd.cmake)